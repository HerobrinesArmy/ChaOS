; --------------------------------------------
; Title:   lib_STDIO
; Author:  Alex
; Date:    8/24/2012
; Version: 0.5
; --------------------------------------------

; From the spec
;
;The Goal of the STDIO library is as follows:
;
;Enable extremely flexible and fast Input and Output system
;
;Allow programs easy access to screen, keyboard, and FS access
;
;Implement security against bad programs
;
;Make the Implemtation completely independant of programs, for easy modification

:lib_STDIO_init
    ; INPUT: NONE
    ; OUTPUT: NONE
    ; DESC: Sets neccecary variables to function
    ; NOTE: EITHER CALL THIS OR SET THE DAT VARS YOURSELF!
    SET PUSH, J
    SET J, 0
    HWN C
    :lib_STDIO_initLoop
        IFE B, 0x30CF
            IFE A, 0x7406 
                JSR lib_STDIO_initKeyboard
        IFE B, 0x7349
            IFE A, 0xF615 
                JSR lib_STDIO_initScreen
        ADD J, 1
        IFE J, C
            SET PC, lib_STDIO_initLoopEnd
        SET PC, lib_STDIO_initLoop
    :lib_STDIO_initScreen
    SET [lib_STDIO_monitorID], J
    SET PC, POP
    :lib_STDIO_initKeyboard
    SET [lib_STDIO_KeyboardID], J
    SET PC, POP
    :lib_STDIO_initLoopEnd
    SET J, POP
    SET PC, POP

:lib_STDIO_getChar
    ; INPUT: B, A
    ; OUTPUT: A
    ; DESC: If A == 0, return ASAP, returns B characters starting with address A
    ; NOTE: A will be 0 if getChar fails!
    ; NOTE: Caller is responsible for freeing memory!
    SET C, A
    SET A, B
    JSR mem_alloc
    IFE A, 0
        SET PC, POP
    SET PUSH, Z
    SET PUSH, Y
    SET PUSH, X
    SET PUSH, I
    SET X, C
    SET Z, A
    SET Y, A
    SET I, 0
    :lib_STDIO_getCharLoop
        SET A, 1
        HWI [lib_STDIO_KeyboardID]
        IFE C, 0
            IFN X, 0
                SET PC, lib_STDIO_getCharLoop
        IFE C, 0x0010
            IFL Y, Z
                SUB Z, 0x0001
        SET [Z], C
        ADD Z, 0x0001
        IFE C, 0
            SET PC, lib_STDIO_getCharLoopEnd
        ADD I, 1
        IFN I, B
            SET PC, lib_STDIO_getCharLoop
    :lib_STDIO_getCharLoopEnd
    SET I, POP
    SET X, POP
    SET A, Y
    SET Y, POP
    SET Z, POP
    SET PC, POP
        
    
:lib_STDIO_print
    ; INPUT: B, A
    ; OUTPUT: NONE
    ; DESC: print B characters starting at location A
    
:lib_STDIO_KeyboardID dat 0x0000
:lib_STDIO_MonitorID dat 0x0000