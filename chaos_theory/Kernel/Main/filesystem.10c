; --------------------------------------------
; Title:   filesystem
; Author:  Liraal
; Date:    2012-08-16
; Version: 0x1
; --------------------------------------------

;=============================================
;VARIABLES
;=============================================
:fs_drive 		dat 0x0
:fs_dir	  		dat 0x0
:fs_FAT_offset	dat 0xC8
:fs_FAT_number	dat 0x3
:fs_root_offset	dat 0xCB
:fs_FAT			dat 0x0
:fs_dir_entry	dat 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
;=============================================
;ROUTINES
;=============================================

;errors
:fs_oom dat 0x0, 0x2345	;out of memory
:fs_nes	dat 0x0, 0x3456


;I/O

:fs_load_sector	;A - sector number, B - number of sectors, C - memory area to read to
set push, X
set X, C
set C, B
set B, A
set A, 0x10
hwi [fs_drive]
set A, B
set B, C
set C, X
set X, pop
set pc, pop

:fs_write_sector	;A - sector number, B - number of sectors, C - memory area to write from
set push, X
set X, C
set C, B
set B, A
set A, 0x11
hwi [fs_drive]
set A, B
set B, C
set C, X
set X, pop
set pc, pop

;FAT access

:fs_load_FAT
ifn [fs_FAT], 0x0
	set pc, pop
set push, A
set push, B
set push, C
set A, [fs_FAT_number]
mul A, 0x200
jsr mem_alloc
ife A, 0x0
	jsr fs_oom
set C, A
set A, [fs_FAT_offset]
set B, [fs_FAT_number]
jsr fs_load_sector
set [fs_FAT], C
set C, pop
set B, pop
set A, pop
set pc, pop

:fs_update_FAT
set push, A
set push, B
set push, C
set A, [fs_FAT_number]
set C, [fs_FAT]
set A, [fs_FAT_offset]
set B, [fs_FAT_number]
jsr fs_write_sector
set A, [fs_FAT]
jsr mem_free
set [fs_FAT], 0x0
set C, pop
set B, pop
set A, pop
set pc, pop

:fs_get_FAT_entry	;A - starting sector
set push, B
set push, X
set X, A
ife [fs_FAT], 0x0
	jsr fs_load_FAT
set A, [fs_FAT]
set B, A
add X, A
set A, [X]
set X, A
set A, B
set A, X
set X, pop
set B, pop
set pc, pop

:fs_get_free_sector ;returns the number of the next free sector or 0x0 if none
set push, I
set push, X
ife [fs_FAT], 0x0
	jsr fs_load_FAT
set A, [fs_FAT]
set I, A
set X, [fs_FAT_number]
mul X, 0x200
add X, I
:.loop
 ife [I], 0x0
 	set pc, .end
 add I, 0x1
 ifl I, X
	set pc, .loop
set I, [fs_FAT]
:.end
sub I, [fs_FAT]
set A, I
set X, pop
set I, pop
set pc, pop

;file management

:fs_create_file	;A - length in sectors
ife A, 0x0
	set pc, pop
set push, A
set push, B
set push, X
set X, A
jsr fs_get_free_sector
set B, A
add B, [fs_FAT]
add X, 0x1
:.loop
ife X, 0x0
	set pc, .end
jsr fs_get_free_sector
set [B], A
set B, A
add B, [fs_FAT]
sub X, 0x1
set pc, .loop
:.end
set [B], 0xFFFF
jsr fs_update_FAT
set X, pop
set B, pop
set A, pop
set pc, pop

:fs_get_file_length	;A - starting cluster
set push, I
set I, 0x0
:.loop
jsr fs_get_FAT_entry
add I, 0x1
ifn A, 0xFFFF
	ifl I, 0x5A0
		set pc, .loop
set A, I
set I, pop
set pc, pop

:fs_load_file	;A - starting cluster (as always)
set push, B
set push, C
set push, I
set push, X
set push, Y
set Y, A
set I, 0x0
jsr fs_get_file_length
set push, A
mul A, 0x200
jsr mem_alloc
set X, A
set A, Y
:.loop
set B, 0x1
set C, X
jsr fs_load_sector
add X, 0x200
jsr fs_get_FAT_entry
add I, 0x1
ifn A, 0xFFFF
	ifl I, 0x5A0
		set pc, .loop
set A, pop
mul A, 0x200
sub X, A
set A, X
jsr fs_update_FAT
set Y, pop
set X, pop
set I, pop
set C, pop
set B, pop
set pc, pop

:fs_edit_file	;A - starting cluster (as always), X - memory area to read from
set push, A
set push, B
set push, C
set push, X
set push, Y
set B, A
jsr fs_get_file_length
mul A, 0x200
set Y, A
set A, B
:.loop
set B, 0x1
set C, X
jsr fs_write_sector
jsr fs_get_FAT_entry
add X, 0x200
ifn A, 0xFFFF
	ifl X, Y
		set pc, .loop
jsr fs_update_FAT
set Y, pop
set X, pop
set C, pop
set B, pop
set A, pop
set pc, pop

:fs_delete_file	;A - starting cluster
set push, B
:.loop
set B, A
jsr fs_get_FAT_entry
add B, [fs_FAT]
set [B], 0x0
ifn A, 0xFFFF
	set pc, .loop
set B, pop
jsr fs_update_FAT
set pc, pop