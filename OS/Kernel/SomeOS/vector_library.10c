;takes a,b as start of vectors in ram
;takes c as length of array
:vector_ADD
ifg A, C
	SET PC, POP
ADD [A], [B]
ADD A, 1
ADD B, 1
SET PC, vector_ADD
:vector_SUB
ifg A, C
	SET PC, POP
SUB [A], [B]
ADD A, 1
ADD B, 1
SET PC, vector_SUB
:vector_MUL
ifg A, C
	SET PC, POP
MUL [A], [B]
ADD A, 1
ADD B, 1
SET PC, vector_MUL
:vector_DIV
ifg A, C
	SET PC, POP
DIV [A], [B]
ADD A, 1
ADD B, 1
SET PC, vector_DIV