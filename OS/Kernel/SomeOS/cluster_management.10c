; --------------------------------------------
; Title:   cluster_manager
; Author:  Liraal
; Date:    2012-06-22
; Version: 0x1
; --------------------------------------------
;to init:
;initClusterMemoryArea
;initFAT(unless wokring on formatted disks)
;---------------------------------------------

:ClusterMemory	DAT 0x0
:FATMemory		DAT 0x0
:ClusterOffset	DAT 0x2 ;clusters != sectors, they have different numbers
:OS_drive		DAT 0x2 ; we need a routine for this
:FAT_offset		DAT 0x1 ; where the FATs are placed
:FAT_number		DAT 0x1 ;number of FATs
:FAStack		DAT 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0		;stack that keeps the last 3 
:FolderEntryMemory	DAT 0x0

:initClusterMemoryArea		;inits temp memory for cluster operations.
set push, a
set A, 0x200
jsr mem_alloc
set [ClusterMemory], A
jsr mem_alloc
set [FATMemory], A
set a, 0x10
jsr mem_alloc
set [FolderEntryMemory], a
set a, pop
set pc, pop

:clearTempMemory
set push, i
set push, j
set i, [ClusterMemory]
set j, 0x0
:clearTempMemoryLoop
ife j, 0x200
	set pc, clearTempMemoryEnd
sti [i], 0x0
set pc, clearTempMemoryLoop
:clearTempMemoryEnd
set j, pop
set i, pop
set pc, pop

:initFAT
set push, a
set push, b
jsr clearTempMemory
set a, [ClusterMemory]
set [a], 0xffff
set a, [FAT_offset]
set b, [OS_drive]
jsr writeClusterFromTemp
set b, pop
set a, pop
set pc, pop

:unloadClusterMemory
set push, a
set a, [ClusterMemory]
jsr mem_free
set a, [FATMemory]
jsr mem_free
set a, [FolderEntryMemory]
jsr mem_free
set a, pop
set pc, pop

:fileStackPush
set push, i
set i, FAStack
add i, 0xA
:fileStackPushLoop
ifl i, FAStack
	set pc, fileStackPushOverflow
ife [i], 0x0
	set pc, fileStackPushEnd
sub i, 0x1
set pc, fileStackPushLoop
:fileStackPushOverflow
set i, FAStack
add i, 0xA
:fileStackPushEnd
set [i], a
set i, pop
set pc, pop

:fileStackPop
set push, i
set push, j
set i, FAStack
set j, i
add j, 0x9
:fileStackPopLoop
ifg i, j
	set pc, fileStackPopEmpty
ifn [i], 0x0
	set pc, fileStackPopEnd
add i, 0x1
set pc, fileStackPopLoop
:fileStackPopEmpty
set i, FAStack
add i, 0xA
:fileStackPopEnd
set a, [i]
set [i], 0x0
set j, pop
set i, pop
set pc, pop

:writeClusterToTemp			;TODO: NEEDS IMPLEMENTATION			<----
set pc, pop

:loadClusterToTemp ;A - cluster number, B- drive adress, reads data from a sector of a drive to temp memory
set push, x
set push, b
set push, a
set a, 0x10
set b, pop
set c, 0x1
set x, [ClusterMemory]
hwi pop
set x, pop
set pc, pop

:writeClusterFromTemp ;A - cluster number, B - drive adress, writes data from temp memory to a sector of drive 
set push, x
set push, b
set push, a
set a, 0x11
set b, pop
add b, [ClusterOffset]
set c, 0x1
set x, [ClusterMemory]
hwi pop
set x, pop
set pc, pop

:loadClusterToTempFAT ;A - cluster number, B- drive adress, reads data from a sector of a drive to temp memory
set push, x
set push, b
set push, a
set a, 0x10
set b, pop
add b, 1
set c, 0x1
set x, [FATMemory]
hwi pop
set x, pop
set pc, pop

:writeClusterFromTempFAT ;A - cluster number, B - drive adress, writes data from temp memory to a sector of drive 
set push, x
set push, b
set push, a
set a, 0x11
set b, pop
add b, 1
set c, 0x1
set x, [FATMemory]
hwi pop
set x, pop
set pc, pop

:getFileSectors			;A - number of file, loads file to memory, output: A - adress of 1. byte of said file or 0xFFFF if no file found
jsr loadFAT
set i, [ClusterMemory]
set j, 0
:searchFAT
ife j, 0xFFFF
	set pc, noFileEntry
ife a, j
	set pc, fileEntryFound
ife [i], 0xFFFF
	add j, 1
add i, 1
set pc, searchFAT
:fileEntryFound
set a, i
jsr loadClusterToMemory
set push, a
:loadingFile
ife i, 0xffff
	set pc, noFileEntry
ife [i], 0xFFFF
	set pc, fileEnd
add i, 1
set a, i
jsr loadClusterToMemory
set pc, loadingFile
:fileEnd
set a, pop
jsr fileStackPush
set pc, pop

:noFileEntry
	set a, 0xffff
	set pc, pop

:loadFAT				;loads FAT table to temp memory. Temp memory only holds 1KB, so bigger ttables won't fit.
set push, a
set push, b
set a, [FAT_offset]
set b, [OS_drive]
jsr loadClusterToTempFAT
set b, pop
set a, pop
set pc, pop

:updateFAT				;loads FAT table to temp memory. Temp memory only holds 1KB, so bigger ttables won't fit.
set push, a
set push, b
set a, [FAT_offset]
set b, [OS_drive]
jsr writeClusterFromTempFAT
set b, pop
set a, pop
set pc, pop

:loadClusterToMemory ;A - cluster number, loads a cluster to memory, output: A - adress of said cluster
set push, b
set push, c
set push, i
set push, x
set push, a
set A, 0x200
jsr mem_alloc
set i, a
set a, 0x10
set b, pop
set c, 0x1
set x, [i]
hwi [OS_drive]
set a, i
set x, pop
set i, pop
set c, pop
set b, pop
set pc, pop

:writeClusterFromMemory ;A - memory adress, B - cluster number
set push, b
set push, c
set push, x
set push, a
set a, 0x11
add b, [ClusterOffset]
set c, 0x1
set x, peek
hwi [OS_drive]
set a, pop
set x, pop
set c, pop
set b, pop
set pc, pop

:editFile	;A - file no., B - file length (clusters), C - 1. byte in memory
jsr loadFAT
set i, [ClusterMemory]
set j, 0
:edit_searchFAT
ife a, j
	set pc, edit_fileEntryFound
ife [i], 0xFFFF
	add j, 1
add i, 1
set pc, edit_searchFAT
:edit_fileEntryFound
set push, a
set push, x
set push, c
set push, b
set b, i
add b, [ClusterOffset]
set c, pop
set x, pop
set a, 0x11
hwi [OS_drive]
set b, c
set c, x
set x, pop
set a, pop
set pc, pop

:deleteFile		;A - file number
jsr loadFAT
set i, [ClusterMemory]
set j, 0
:delete_searchFAT
ife a, j
	set pc, delete_fileEntryFound
ife [i], 0xFFFF
	add j, 1
add i, 1
set pc, delete_searchFAT
:delete_fileEntryFound
set a, i
set [a], 0x0
set push, a
:deletingFile
ife [i], 0xFFFF
	set pc, delete_fileEnd
add i, 1
set a, i
set pc, deletingFile
:delete_fileEnd
set [i], 0x0
jsr updateFAT
set a, pop
set pc, pop

:createFile		;A - file length in clusters, B - file 1. byte adress, output: y - file number (hopefully)
set push, a
jsr loadFAT
set i, [ClusterMemory]
set j, 0
:create_searchFAT
ife a, j
	set pc, create_fileEntryFound
ife [i], 0x0
	add j, 1
ifn [i], 0x0
	set j, 0x0
add i, 1
set pc, create_searchFAT
:create_fileEntryFound
set y, i
set push, a
set push, c
set push, x
set push, b
set b, i
add b, [ClusterOffset]
set c, a
set x, pop
set a, 0x11
hwi [OS_drive]
set b, x
set x, pop
set c, pop
set a, pop
set j, 0x0
add i, [ClusterMemory]
:create_updateFAT
ife j, a
	set pc, create_end
add i, j
set [i], j
sub i, j
add j, 1
set pc, create_updateFAT
:create_end
jsr updateFAT
set a, pop
set pc, pop

:folderAddEntry		;input: A - adress of correctly formatted folder entry, B -number of folder, output c - 0 if successful, 1 if not
set push, a
set push, b
set push, i
set push, j
set push, x
set c, a
set a, b
jsr getFileSectors
set x, a
set a, c
set i, 0x0
:folderAddEntry_loop
ife i, 0x200
	set pc, folderAddEntry_end
add i, x
set j, 0x0
set c, 0x0
:folderAddEntry_loop2
ife j, 0x10
	ife c, 0x0
		set pc, folderAddEntry_add
ife j, 0x10
	set pc, folderAddEntry_end2
SET PUSH, Z
SET Z, J
ADD Z, I
ifn [Z], 0x0
	set c, 0x1
SET Z, POP
add j, 1
set pc, folderAddEntry_loop2
:folderAddEntry_end2
sub i, x
add i, 1
set pc, folderAddEntry_loop
:folderAddEntry_end
set a, b
set b, 1
set c, x
jsr editFile
set x, pop
set j, pop
set i, pop
set b, pop
jsr fileStackPop
jsr mem_free
set a, pop
set pc, pop


:folderAddEntry_add
set j, 0x0
:folderAddEntry_add_loop
ife j, 0x10
	set pc, folderAddEntry_end
SET PUSH, Z
SET Z, I
ADD Z, J
set [Z], [a]
SET Z, POP
add a, 1
add j, 1
set pc, folderAddEntry_add_loop

:folderDeleteEntry	;A - entry number, B - folder number
set push, a
set push, b
set push, i
set push, j
set push, x
set c, a
set a, b
jsr getFileSectors
set x, a
set a, c
set j, 0x0
set i, a
mul i, 0x10
add i, x
:folderDeleteEntry_loop
ife j, 0x10
	set pc, folderDeleteEntry_end
sti [i], 0x0
set pc, folderDeleteEntry_loop
:folderDeleteEntry_end
set a, b
set b, 1
set c, x
jsr editFile
set x, pop
set j, pop
set i, pop
set b, pop
jsr fileStackPop
jsr mem_free
set a, pop
set pc, pop

:folderGetEntry		;A - entry number, B -folder number, output: C - adress of the entry
set push, a
set push, x
set c, a
set a, b
jsr getFileSectors
set x, a
set a, c
mul c, 0x10
add c, x
set push, i
set i, 0x0
:folderGetEntryLoop
ife i, 0x10
	set pc, folderGetEntryEnd
add i, [FolderEntryMemory]
set [i], [c]
sub i, [FolderEntryMemory]
add i, 1
add c, 1
set pc, folderGetEntryLoop
:folderGetEntryEnd
set i, pop
set x, pop
jsr fileStackPop
jsr mem_free
set a, pop
set c, [FolderEntryMemory]
set pc, pop