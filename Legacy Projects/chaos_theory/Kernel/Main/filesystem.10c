; --------------------------------------------
; Title:   filesystem
; Author:  Liraal
; Date:    2012-08-16
; Version: 0x1
; --------------------------------------------

;=============================================
;VARIABLES
;=============================================
:fs_drive 		dat 0x0
:fs_dir	  		dat 0x0
:fs_FAT_offset	dat 0xC8
:fs_FAT_number	dat 0x3
:fs_root_offset	dat 0xCB
:fs_FAT			dat 0x0
:fs_dir_entry	dat 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
:fs_dir_entry_end
:fs_dir_tree	dat 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
:fs_dir_tree_end
;=============================================
;ROUTINES
;=============================================

;errors
:fs_oom dat 0x0, 0x2345	;out of memory
:fs_nes	dat 0x0, 0x3456


;I/O

:fs_load_sector	;A - sector number, B - number of sectors, C - memory area to read to
set push, X
set X, C
set C, B
set B, A
set A, 0x10
hwi [fs_drive]
set A, B
set B, C
set C, X
set X, pop
set pc, pop

:fs_write_sector	;A - sector number, B - number of sectors, C - memory area to write from
set push, X
set X, C
set C, B
set B, A
set A, 0x11
hwi [fs_drive]
set A, B
set B, C
set C, X
set X, pop
set pc, pop

;FAT access

:fs_load_FAT
ifn [fs_FAT], 0x0
	set pc, pop
set push, A
set push, B
set push, C
set A, [fs_FAT_number]
mul A, 0x200
jsr mem_alloc
ife A, 0x0
	jsr fs_oom
set C, A
set A, [fs_FAT_offset]
set B, [fs_FAT_number]
jsr fs_load_sector
set [fs_FAT], C
set C, pop
set B, pop
set A, pop
set pc, pop

:fs_update_FAT
set push, A
set push, B
set push, C
set A, [fs_FAT_number]
set C, [fs_FAT]
set A, [fs_FAT_offset]
set B, [fs_FAT_number]
jsr fs_write_sector
set A, [fs_FAT]
jsr mem_free
set [fs_FAT], 0x0
set C, pop
set B, pop
set A, pop
set pc, pop

:fs_get_FAT_entry	;A - starting sector
set push, B
set push, X
set X, A
ife [fs_FAT], 0x0
	jsr fs_load_FAT
set A, [fs_FAT]
set B, A
add X, A
set A, [X]
set X, A
set A, B
set A, X
set X, pop
set B, pop
set pc, pop

:fs_get_free_sector ;returns the number of the next free sector or 0x0 if none
set push, I
set push, X
ife [fs_FAT], 0x0
	jsr fs_load_FAT
set A, [fs_FAT]
set I, A
set X, [fs_FAT_number]
mul X, 0x200
add X, I
:.loop
 ife [I], 0x0
 	set pc, .end
 add I, 0x1
 ifl I, X
	set pc, .loop
set I, [fs_FAT]
:.end
sub I, [fs_FAT]
set A, I
set X, pop
set I, pop
set pc, pop

;file management

:fs_create_file	;A - length in sectors
ife A, 0x0
	set pc, pop
set push, B
set push, X
set X, A
jsr fs_get_free_sector
set push, A
set B, A
add B, [fs_FAT]
:.loop
ife X, 0x0
	set pc, .end
jsr fs_get_free_sector
set [B], A
set B, A
add B, [fs_FAT]
sub X, 0x1
set pc, .loop
:.end
set [B], 0xFFFF
jsr fs_update_FAT
set A, pop
set X, pop
set B, pop
set pc, pop

:fs_get_file_length	;A - starting cluster
set push, I
set I, 0x0
:.loop
jsr fs_get_FAT_entry
add I, 0x1
ifn A, 0xFFFF
	ifl I, 0x5A0
		set pc, .loop
set A, I
set I, pop
set pc, pop

:fs_load_file	;A - starting cluster (as always)
set push, B
set push, C
set push, I
set push, X
set push, Y
set Y, A
set I, 0x0
jsr fs_get_file_length
set push, A
mul A, 0x200
jsr mem_alloc
ife A, 0x0
	dat 0
set X, A
set A, Y
:.loop
set B, 0x1
set C, X
add A, [fs_root_offset]
jsr fs_load_sector
sub A, [fs_root_offset]
add X, 0x200
jsr fs_get_FAT_entry
add I, 0x1
ifn A, 0xFFFF
	ifl I, 0x5A0
		set pc, .loop
set A, pop
mul A, 0x200
sub X, A
set A, X
jsr fs_update_FAT
set Y, pop
set X, pop
set I, pop
set C, pop
set B, pop
set pc, pop

:fs_edit_file	;A - starting cluster (as always), X - memory area to read from
set push, A
set push, B
set push, C
set push, X
set push, Y
set B, A
jsr fs_get_file_length
mul A, 0x200
set Y, A
set A, B
:.loop
set B, 0x1
set C, X
add A, [fs_root_offset]
jsr fs_write_sector
sub A, [fs_root_offset]
jsr fs_get_FAT_entry
add X, 0x200
ifn A, 0xFFFF
	ifl X, Y
		set pc, .loop
jsr fs_update_FAT
set Y, pop
set X, pop
set C, pop
set B, pop
set A, pop
set pc, pop

:fs_delete_file	;A - starting cluster
set push, B
:.loop
set B, A
jsr fs_get_FAT_entry
add B, [fs_FAT]
set [B], 0x0
ifn A, 0xFFFF
	set pc, .loop
set B, pop
jsr fs_update_FAT
set pc, pop

:fs_resize_file	;A - starting cluster, B - new length
ife B, 0x0
	set pc, fs_delete_file
set push, A
jsr fs_get_file_length
ifl A, B
	set pc, .extend
ifg A, B
	set pc, .shirnk
set A, pop
set pc, pop
.shrink
;//TODO

:fs_file_set_metadata	;A - starting cluster, B - address of metadata
set push, X
set push, C
set push, B
set push, A
set X, B
set A, 0x200
jsr mem_alloc
ife A, 0x0
	dat 0x0
set C, A
set A, peek
set B, 0x1
jsr fs_load_sector
set A, C
set B, X
set push, C
set C, 0x10
jsr fs_util_assign
set C, pop
set A, peek
set B, 0x1
jsr fs_write_sector
set A, C
jsr mem_free
set A, pop
set B, pop
set C, pop
set X, pop
set pc, pop

:fs_file_get_metadata	;A - starting cluster, output: A - address of metadata
set push, X
set push, C
set push, B
set push, A
set X, B
set A, 0x200
jsr mem_alloc
ife A, 0x0
	dat 0x0
set C, A
set A, peek
set B, 0x1
jsr fs_load_sector
set A, fs_dir_entry
set B, C
set push, C
set C, 0x10
jsr fs_util_assign
set A, pop
jsr mem_free
set A, pop
set B, pop
set C, pop
set X, pop
set pc, pop

;dir management

:fs_get_dir_entry	;A - guess what? starting cluster, B - number of the entry
jsr fs_load_file
set push, I
set push, J
set J, A
set I, B
mul I, 0x10
add J, I
set I, fs_dir_entry
:.loop
sti [I], [J]
ifn I, fs_dir_entry_end
	set pc, .loop
jsr mem_free
set A, fs_dir_entry
set J, pop
set I, pop
set pc, pop

:fs_get_free_dir_entry	;A - cluster output: A - number of entry or 0xFFFF if none
set push, I
set push, J
set push, X
set push, Y
set push, A
jsr fs_load_file
set X, A
set Y, X
sub X, 0x1
set I, 0x0
set A, pop
jsr fs_get_file_length
set J, A
mul J, 0x200
set A, 0x0
:.loop
:.loop2
add I, 0x1
ife I, 0x10
	set pc, .end
add X, 0x1
ife [X], 0x0
	set pc, .loop2
add A, 0x1
set I, 0x0
add X, 0x10
ifn X, J
	set pc, .loop
set A, Y
jsr mem_free
set Y, pop
set X, pop
set J, pop
set I, pop
set A, 0xFFFF
set pc, pop
:.end
set push, A
set A, Y
jsr mem_free
set A, pop
set Y, pop
set X, pop
set J, pop
set I, pop
set pc, pop

:fs_add_dir_entry	;A - cluster, B - address
set push, B
set push, C
set push, X
set push, Y
set push, Z
set C, A
jsr fs_load_file
set X, A
set push, A
set A, C
jsr fs_get_free_dir_entry
set Z, A
mul A, 0x10
add X, A
set Y, X
add Y, 0x10
:.loop
set [X], [B]
add X, 0x1
add B, 0x1
ifn X, Y
	set pc, .loop
set A, C
set X, pop
jsr fs_edit_file
set A, X
jsr mem_free
set A, Z
set Z, pop
set Y, pop
set X, pop
set C, pop
set B, pop
set pc, pop

:fs_remove_dir_entry ;A - cluster B - number of the entry
set push, A
set push, B
set push, X
set push, A
jsr fs_load_file
set X, A
set push, A
mul B, 0x10
add X, B
set A, X
add A, 0x10
:.loop
set [X], 0x0
add X, 0x1
ifn X, A
	set pc, .loop
set X, pop
set A, pop
jsr fs_edit_file
set A, X
jsr mem_free
set X, pop
set B, pop
set A, pop
set pc, pop

;advanced fs routines

:fs_mkfile ;A - address of filename (regular 11-char word), B- file size in clusters, output: A - number of the entry in current dir
set push, I
set push, J
set push, B
set I, B
set B, fs_dir_entry
jsr fs_to5word
set B, I
set J, fs_dir_entry
add J, 0xC
set A, B
jsr fs_create_file
set push, A
set [J], A
add J, 0x1
set [J], B
add J, 0x1
set [J], 0x0
set A, [fs_dir]
set B, fs_dir_entry
jsr fs_add_dir_entry
set A, pop
jsr fs_file_set_metadata
set B, pop
set J, pop
set I, pop
set pc, pop

:fs_mkdir ;A - address of dir name (converted to 5-word), B- dir size in clusters, output: A - number of the entry in current dir
set push, I
set push, J
set push, B
set I, 0x0
set J, fs_dir_entry
.loop
sti [J], [A]
add A, 0x1
ifl i, 0x5
	set pc, .loop
set [J], 0x0
add J, 0x1
set [J], 0x10
add J, 0x6 ;skipping the datetime, for we have no clock in yet
set A, B
jsr fs_create_file
set push, A
set [J], A
add J, 0x1
set [J], B
add J, 0x1
set [J], 0x0
set A, [fs_dir]
set B, fs_dir_entry
jsr fs_add_dir_entry
set A, pop
jsr fs_file_set_metadata
set B, pop
set J, pop
set I, pop
set pc, pop

:fs_find_entry_by_name ;A - name as 11-word, output: A - entry number or 0xFFFF if none
set push, I
set push, C
set push, B
set B, fs_dir_entry
jsr fs_to5word
set A, [fs_dir]
jsr fs_load_file
set push, A
set I, 0x0
 .loop
 set push, A
 set B, fs_dir_entry
 set C, 0x5
 jsr fs_util_compare
 ife A, 0x0
  set pc, .end
 set A, peek
 set B, 0x5
 jsr fs_util_isnull
 set C, A
 set A, pop
 add A, 0x10
 add I, 0x1
 ifn C, 0x0
  set pc, .loop
set A, pop
jsr mem_free
set B, pop
set C, pop
set I, pop
set A, 0xFFFF
set pc, pop
.end
set ex, pop
set A, pop
jsr mem_free
set A, I
set B, pop
set C, pop
set I, pop
set pc, pop

:fs_cd	;A - name as 11word or all zeros to back up
set push, B
set push, A
set B, 0xB
jsr fs_util_isnull
ife A, 0x0
	set pc, .back
set A, pop
jsr fs_find_entry_by_name
jsr fs_dir_push
set B, pop
set pc, pop
.back
jsr fs_dir_pop
set A, pop
set B, pop
set pc, pop

;dir tree exploration

:fs_dir_push	;A - a dir to move to
set push, I
set I, fs_dir_tree
.loop
 ife [I], 0x0
 	set pc, .end
 add I, 0x1
 ifn I, fs_dir_tree_end
 	set pc, .loop
set I, fs_dir_tree
.end
set [I], A
jsr fs_dir_update
set I, pop
set pc, pop

:fs_dir_pop	;output: A - startng cluster of current dir before popping
set push, I
set I, fs_dir_tree_end
.loop
	ifn [I], 0x0
		set pc, .end
	sub I, 0x1
	ifn I, fs_dir_tree
		set pc, .loop
set A, 0x0
set I, pop
set pc, pop
set A, [I]
set [I], 0x0
jsr fs_dir_update
set I, pop
set pc, pop

:fs_dir_peek	;output: A - starting cluster of current dir
set push, I
set I, fs_dir_tree_end
.loop
	ifn [I], 0x0
		set pc, .end
	sub I, 0x1
	ifn I, fs_dir_tree
		set pc, .loop
set A, 0x0
set I, pop
set pc, pop
set A, [I]
set I, pop
set pc, pop

:fs_dir_update	;refresh the fs_dir pointer
set push, A
jsr fs_dir_peek
set [fs_dir], A
set A, pop
set pc, pop
	
;additional routines
:fs_to5word   ;a - input, 11-Word, b - output, 5-Word
set push, a
set push, b
set push, c
set push, i
set push, j
set i, a
set j, b
set a, [i]
add i,1
shl a, 0x9
set b, [i]
shl b, 0x2
bor a, b
add i, 1
set b, [i]
and b, 0x60
shr b, 0x5
bor a, b
set [j], a ;1st word
add j, 1
set a, [i]
and a, 0x1F
shl a, 0xB
add i, 1
set b, [i]
shl b, 0x4
bor a, b
add i, 1
set b, [i]
and b, 0x78
shr b, 0x3
bor a, b
set [j], a ;2nd word
add j, 1
set a, [i]
and a, 0x7
shl a, 0xD
add i, 1
set b, [i]
shl b, 0x6
bor a, b
add i, 1
set b, [i]
and b, 0x7E
shr b, 1
bor a, b
set [j], a ;3rd word
add j, 1
set a, [i]
and a, 0x1
shl a, 0xF
add i, 1
set b, [i]
shl b, 0x8
bor a, b
add i, 1
set b, [i]
shl b, 1
bor a, b
add i, 1
set b, [i]
and b, 0x40
shr b, 0x6
bor a, b
set [j], a ;4th word
add j ,1
set a, [i]
and a, 0x3F
shl a, 0xA
add i, 1
set b, [i]
shl b, 0x3
bor a, b
set [j], a ;5th word
set j, pop
set i, pop
set c, pop
set b, pop
set a, pop
set pc, pop

:fs_to11word ;a - adress of the 1. byte of the string, b - 1. byte of output
set push, a
set push, b
set push, c
set push, y
set push, z
set y, a
set z, b
set a, [y]
add y, 1
set b, a
and b, 0xFE00
shr b, 0x9
set [z], b	;1st char
add z, 1
set b, a
and b, 0x1FC
shr b, 0x2
set [z], b	;2nd char
add z, 1 
set b, a
set a, [y]
add y, 1
set c, a
and b, 0x3
and c, 0xF800
shl b, 0x5
shr c, 0xB
bor b, c
set [z], b ;3rd char
add z, 1
set b, a
and b, 0x7F0
shr b, 0x4
set [z], b ;4th char
add z, 1
set b, a
set a, [y]
add y, 1
set c, a
and b, 0xF
and c, 0xE000
shl b, 0x3
shr c, 0xD
bor b, c
set [z], b ;5th char
add z, 1
set b, a
and b, 0x1FC0
shr b, 0x6
set [z], b ;6th char
add z, 1
set b, a
set a, [y]
add y, 1
set c, a
and b, 0x3F
and c, 0x8000
shl b, 1
shr c, 0xF
bor b, c
set [z], b ;7th char
add z, 1
set b, a
and b, 0x7F00
shr b, 0x8
set [z], b ;8th char
add z, 1
set b, a
and b, 0xFE
shr b, 1
set [z], b ;9th char
add z, 1
set b, a
set a, [y]
add y, 1
set c, a
and b, 0x1
and c, 0xFC00
shl b, 0x6
shr c, 0xA
bor b, c
set [z], b	;10th char
add z, 1
set b, a
and b, 0x3F8
shr b, 3
set [z], b ;11th char
set z, pop
set y, pop
set c, pop
set b, pop
set a, pop
set pc, pop

 :fs_util_compare ;A, B; C
 set push, B
 set push, I
 set I, 0x0
  :fs_util_compare_loop
  ifn [A], [B]
	set pc, fs_util_compare_end
  add A, 0x1
  add B, 0x1
  add I, 0x1
  ifn I, C
  	set pc, fs_util_compare_loop
  set I, pop
  set B, pop
  set A, 0x0
  set pc, pop
  :fs_util_compare_end
  set I, pop
  set B, pop
  set A, 0xFFFF
  set pc, pop

 :fs_util_assign ;A, B; C
 set push, C
 set push, I
 set push, J
 set I, A
 set J, B
 add C, I
  :fs_util_assign_loop
  sti [I], [J]
  ifn I, C
  	set pc, fs_util_assign_loop
 set J, pop
 set I, pop
 set C, pop
 set pc, pop
 
 :fs_util_isnull ;A ; B
 set push, B
 add B, A
 :fs_util_isnull_loop
 ifn [A], 0x0
 	set pc, fs_util_isnull_end
 add A, 0x1
 ifn A, B
  set pc, fs_util_isnull_loop
 set A, 0x0
 set B, pop
 set pc, pop
 :fs_util_isnull_end
 set A, 0xFFFF
 set B, pop
 set pc, pop

 